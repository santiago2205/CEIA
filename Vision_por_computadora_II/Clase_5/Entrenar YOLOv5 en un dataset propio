{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Entrenar YOLOv5 en un dataset propio","provenance":[{"file_id":"1ZnkOM8ymAWtCKj8AkQuLUaHAQPToLhKg","timestamp":1628429449982},{"file_id":"1gDZ2xcTOgR39tGGs-EZ6i3RTs16wmzZQ","timestamp":1627677428019},{"file_id":"https://github.com/ultralytics/yolov5/blob/master/tutorial.ipynb","timestamp":1591755516488}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"GD9gUQpaBxNa"},"source":["# Cómo entrenar YOLOv5 on objetos propios\n","\n","Los pasos son los sigueintes: \n","\n","* Instalar dependencias de YOLOv5\n","* Descargar dataset con objetos propios de Roboflow\n","* Definir la configuración del entrenamiento\n","* Correr el entrenamiento de YOLOv5\n","* Evaluar la performance\n","* Visualizar los rótulos en los datos de entrenamiento\n","* Correr YOLOv5 en imágenes de test\n","* Exportar los pesos salvados de YOLOv5 para inferencia futura\n","\n","Fuentes: [repositorio de YOLOv5](https://github.com/ultralytics/yolov5)\n"]},{"cell_type":"markdown","metadata":{"id":"7mGmQbAO5pQb"},"source":["#Instalar dependencias\n","\n","_(Recordar activar la GPU en el colab. Runtime --> Change Runtime Type --> Hardware accelerator --> GPU)_"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ie5uLDH4uzAp","executionInfo":{"status":"ok","timestamp":1627686061247,"user_tz":180,"elapsed":353,"user":{"displayName":"Javier Kreiner","photoUrl":"","userId":"07381406432921956924"}},"outputId":"631e9880-10ba-4246-f3fa-aeb46a5ecbfb"},"source":["# clonar el repo de YOLOv5\n","!git clone https://github.com/ultralytics/yolov5 \n","%cd yolov5\n","!git reset --hard 886f1c03d839575afecb059accf74296fad395b6"],"execution_count":null,"outputs":[{"output_type":"stream","text":["fatal: destination path 'yolov5' already exists and is not an empty directory.\n","/content/yolov5/yolov5\n","HEAD is now at 886f1c0 DDP after autoanchor reorder (#2421)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wbvMlHd_QwMG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627686063668,"user_tz":180,"elapsed":2424,"user":{"displayName":"Javier Kreiner","photoUrl":"","userId":"07381406432921956924"}},"outputId":"fe45ee2f-4985-45e2-9034-e616fc28322d"},"source":["# instalar dependencias\n","!pip install -qr requirements.txt  # instalar dependencias (ignorar errores)\n","import torch\n","\n","from IPython.display import Image, clear_output  # para mostrar imágenes\n","from utils.google_utils import gdrive_download  # para descargar modelos/datasets\n","\n","# clear_output()\n","print('Setup completo. Usando torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0) if torch.cuda.is_available() else 'CPU'))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Setup completo. Usando torch 1.9.0+cu102 _CudaDeviceProperties(name='Tesla T4', major=7, minor=5, total_memory=15109MB, multi_processor_count=40)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"SDIhrBF0sPaM"},"source":["# Descargar el dataset en el formato correcto \n","\n","Vamos a descargar el dataset de Roboflow. Usar \"**YOLOv5 PyTorch**\" como formato a exportar. La implementación que estamos usando requiere un archivo YAML especificando donde están los datos de entrenamiento y test. Este archivo también es producido por Roboflow.\n","We'll download our dataset from Roboflow. Use the \"**YOLOv5."]},{"cell_type":"markdown","metadata":{"id":"vDeebwqS9JbZ"},"source":["\n","\n","![YOLOv5 PyTorch export](https://i.imgur.com/5vr9G2u.png)\n"]},{"cell_type":"code","metadata":{"id":"Knxi2ncxWffW","colab":{"base_uri":"https://localhost:8080/"},"outputId":"2f305d27-343a-4145-93de-01be151548d4"},"source":["# Exportar el segmento de código de exportación y pegarlo acá.\n","!curl -L \"https://app.roboflow.com/ds/wz7qcr5qy9?key=zGlEHDhSOJ\" > roboflow.zip; unzip roboflow.zip; rm roboflow.zip"],"execution_count":null,"outputs":[{"output_type":"stream","text":["  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","                                 Dload  Upload   Total   Spent    Left  Speed\n","100   896  100   896    0     0   1611      0 --:--:-- --:--:-- --:--:--  1611\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZZ3DmmGQztJj"},"source":["# este es el archivo YAM que Roboflow escribe y con el cual cargamos los datos en este notebook\n","%cat data.yaml"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UwJx-2NHsYxT"},"source":["# Definir la configuración del modelo y la arquitectura\n","\n","Vamos a escribir un archivo YAML que define los parámetros del modelo como el número de clases, anchors, y cada capa.\n","\n","No es necesario editar estas celdas."]},{"cell_type":"code","metadata":{"id":"dOPn9wjOAwwK"},"source":["# definir el número de clases basados en el YAML\n","import yaml\n","with open(\"data.yaml\", 'r') as stream:\n","    num_classes = str(yaml.safe_load(stream)['nc'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1Rvt5wilnDyX"},"source":["# esta es la configuración del modelo que vamos a usar acá\n","%cat /content/yolov5/models/yolov5s.yaml"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"t14hhyqdmw6O"},"source":["#customizar iPython writefile para poder escribir variables\n","from IPython.core.magic import register_line_cell_magic\n","\n","@register_line_cell_magic\n","def writetemplate(line, cell):\n","    with open(line, 'w') as f:\n","        f.write(cell.format(**globals()))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uDxebz13RdRA"},"source":["%%writetemplate /content/yolov5/models/custom_yolov5s.yaml\n","\n","# parametros\n","nc: {num_classes}  # numero de clases\n","depth_multiple: 0.33  # multiplo de la profundidad del modelo \n","width_multiple: 0.50  # multipl de la cantidad de canales\n","\n","# anchors\n","anchors:\n","  - [10,13, 16,30, 33,23]  # P3/8\n","  - [30,61, 62,45, 59,119]  # P4/16\n","  - [116,90, 156,198, 373,326]  # P5/32\n","\n","# YOLOv5 backbone\n","backbone:\n","  # [from, number, module, args]\n","  [[-1, 1, Focus, [64, 3]],  # 0-P1/2\n","   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4\n","   [-1, 3, BottleneckCSP, [128]],\n","   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8\n","   [-1, 9, BottleneckCSP, [256]],\n","   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16\n","   [-1, 9, BottleneckCSP, [512]],\n","   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32\n","   [-1, 1, SPP, [1024, [5, 9, 13]]],\n","   [-1, 3, BottleneckCSP, [1024, False]],  # 9\n","  ]\n","\n","# YOLOv5 head\n","head:\n","  [[-1, 1, Conv, [512, 1, 1]],\n","   [-1, 1, nn.Upsample, [None, 2, 'nearest']],\n","   [[-1, 6], 1, Concat, [1]],  # cat backbone P4\n","   [-1, 3, BottleneckCSP, [512, False]],  # 13\n","\n","   [-1, 1, Conv, [256, 1, 1]],\n","   [-1, 1, nn.Upsample, [None, 2, 'nearest']],\n","   [[-1, 4], 1, Concat, [1]],  # cat backbone P3\n","   [-1, 3, BottleneckCSP, [256, False]],  # 17 (P3/8-small)\n","\n","   [-1, 1, Conv, [256, 3, 2]],\n","   [[-1, 14], 1, Concat, [1]],  # cat head P4\n","   [-1, 3, BottleneckCSP, [512, False]],  # 20 (P4/16-medium)\n","\n","   [-1, 1, Conv, [512, 3, 2]],\n","   [[-1, 10], 1, Concat, [1]],  # cat head P5\n","   [-1, 3, BottleneckCSP, [1024, False]],  # 23 (P5/32-large)\n","\n","   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)\n","  ]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VUOiNLtMP5aG"},"source":["# Entrenar un detector YOLOv5 en nuestros datos\n","\n","### Ahora vamos a entrenar el modelo\n","\n","Acá podemos pasar un número de argumentos:\n","- **img:** definir tamaño de la entradasize\n","- **batch:** determinar el tamaño de los batches\n","- **epochs:** definir la cantidad de épocas a entrenar (Nota: es común tener 3000+ acá)\n","- **data:** definir el directorio del archivo yaml\n","- **cfg:** especifciar la configuración del modelo\n","- **weights:** especificar el path customizado a los pesos.\n","- **name:** nombre de los resultados\n","- **nosave:** solo salvar pesos en el checkpoint final\n","- **cache:** cachear las imágenes para un entrenamiento más veloz"]},{"cell_type":"code","metadata":{"id":"1NcFxRcFdJ_O"},"source":["# entrenar yolov5s en datos propios por 100 epocas\n","# medir el tiempo que tarda\n","%%time\n","%cd /content/yolov5/\n","!python train.py --img 416 --batch 16 --epochs 100 --data '../data.yaml' --cfg ./models/custom_yolov5s.yaml --weights '' --name yolov5s_results  --cache"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kJVs_4zEeVbF"},"source":["# Evaluar la performance del detector YOLOv5 customizado\n"," Evaluate Custom YOLOv5 Detector Performance"]},{"cell_type":"markdown","metadata":{"id":"7KN5ghjE6ZWh"},"source":["Losses de entrenamiento y métricas de entrenamiento son salvadas a Tensorboard y a un logfile definido más arriba con el flag **--name** cuando se entrena. En nuestro caso, lo llamamos `yolov5s_results`. (El default es `results.txt`.) El archivo de resultados es ploteado como un png cuando termina el training."]},{"cell_type":"code","metadata":{"id":"bOy5KI2ncnWd"},"source":["# Levantar tensorboard\n","# Lanzarlo después de comenzado el entrenamiento\n","# Los logs se salvan en el directorio \"runs\"\n","%load_ext tensorboard\n","%tensorboard --logdir runs"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"C60XAsyv6OPe"},"source":["# también se pueden ver las métricas de esta manera\n","from utils.plots import plot_results  # ploteas results.txt como results.png\n","Image(filename='/content/yolov5/runs/train/yolov5s_results/results.png', width=1000)  # view results.png"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DLI1JmHU7B0l"},"source":["### Podemos visualizar nuestros datos de entrenamiento con rótulos\n","\n","Luego de comenzar el entramiento, se pueden ver los archivos `train*.jpg` para ver las imágenes, rótulos y efectos del data augmentation."]},{"cell_type":"code","metadata":{"id":"PF9MLHDb7tB6"},"source":["# mostrar el ground truth \n","print(\"GROUND TRUTH DE LOS DATOS DE ENTRENAMIENTO:\")\n","Image(filename='/content/yolov5/runs/train/yolov5s_results/test_batch0_labels.jpg', width=900)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"W40tI99_7BcH"},"source":["# printear un ejemplo de entrenamiento aumentado:\n","print(\"GROUND TRUTH AUMENTADO PARA ENTRENAMIENTO:\")\n","Image(filename='/content/yolov5/runs/train/yolov5s_results/train_batch0.jpg', width=900)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"N3qM6T0W53gh"},"source":["# Hacer inferencia con los pesos entrenados\n","Run inference with a pretrained checkpoint on contents of `test/images` folder downloaded from Roboflow."]},{"cell_type":"code","metadata":{"id":"yIEwt5YLeQ7P"},"source":["# los pesos entrenados son salvados por default en la carpeta de pesos\n","%ls runs/"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4SyOWS80qR32"},"source":["%ls runs/train/yolov5s_results/weights"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rRhZmqhMqQtQ"},"source":[""]},{"cell_type":"code","metadata":{"id":"9nmZZnWOgJ2S"},"source":["# el tiempo de inferencia debería ser aprox. .007 segundos. Eso es 140 FPS en un TESLA P100!\n","# usar los mejores peses:\n","%cd /content/yolov5/\n","!python detect.py --weights runs/train/yolov5s_results/weights/best.pt --img 416 --conf 0.4 --source ../test/images"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"odKEqYtTgbRc"},"source":["# mostrar la inferencia en todas las imágenes de test\n","# esto precisa de bastante entrenamiento para verse mejor\n","\n","import glob\n","from IPython.display import Image, display\n","\n","for imageName in glob.glob('/content/yolov5/runs/detect/exp/*.jpg'): #asume JPG\n","    display(Image(filename=imageName))\n","    print(\"\\n\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_uPq9mVgiBql"},"source":["# Exportar los pesos entrenados para inferencia futura \n","\n","Ahora que tenemos un detector customizado podemos exportar los pesos para hacer inferencia en algún otro dispositivo"]},{"cell_type":"code","metadata":{"id":"YH4CTzDRh00g"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1x_wg3VeiXMW"},"source":["%cp /content/yolov5/runs/train/yolov5s_results/weights/best.pt /content/gdrive/My\\ Drive"],"execution_count":null,"outputs":[]}]}